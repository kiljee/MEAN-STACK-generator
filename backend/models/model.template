// Autogenerated from java.template file
{# class {{entity.name}} {


  {% for property in entity.properties %}
  protected {{property.type|javatype}} {{property.name}};
  {% endfor %}

  {% for property in entity.properties %}
  public {{property.type|javatype}} get{{property.name|capitalize}}(){
    return this.{{property.name}};
  }

  public void set{{property.name|capitalize}}({{property.type|javatype}} new_value){
    this.{{property.name}} = new_value;
  }

  {% endfor %}

} #}

var mongoose = require('mongoose'), Schema = mongoose.Schema
var validate = require('mongoose-validator');

{% for property in entity.properties %}
  {% if property.validationAlpha or property.validationLength %}
var {{property.name}}Validator = [
    {% if property.validationLength  %}
  validate({
    validator: 'isLength',
    arguments: [{{property.validationLength.min}}, {{property.validationLength.max}}],
    message: '{{property.name | capitalize}} should be between {ARGS[0]} and {ARGS[1]} characters'
  }),
    {% endif %}
    {% if property.validationAlpha %}
  validate({
    validator: 'isAlpha',
    passIfEmpty: true,
    message: '{{property.name | capitalize}} should contain alpha-numeric characters only'
  })
    {% endif %}
];
  {% endif %}
{% endfor %}

var {{entity.name}}Schema = new mongoose.Schema({
  {% for property in entity.properties %}
  {%set vrednost = {'provera' :  True}%}
  {{property.name}}:{%for ent in entities%} {%if ent.name == property.type | javatype %} {% if vrednost.update({'provera': False}) %}{% endif %} [{ type: Schema.Types.ObjectId, ref: '{{ent.name}}' }]{% endif %}{%endfor%} {%if vrednost.provera%}{{vrednost.foo}}{type:{{property.type | javatype}}, required: true
      {% if property.validationAlpha or property.validationLength %} , validate:{{property.name}}Validator{% endif %}}{%endif%}{%if loop.index != entity.properties |length%},{% endif %}
  {% endfor %}
})

module.exports = mongoose.model('{{entity.name}}Schema', {{entity.name}}Schema)
